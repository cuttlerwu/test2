fff0.0.weight
fff0.0.bias
fff0.1.weight
fff0.1.bias
fff0.1.running_mean
fff0.1.running_var
fff0.1.num_batches_tracked
fff1.0.weight
fff1.0.bias
fff1.1.weight
fff1.1.bias
fff1.1.running_mean
fff1.1.running_var
fff1.1.num_batches_tracked
fff2.0.weight
fff2.0.bias
fff2.1.weight
fff2.1.bias
fff2.1.running_mean
fff2.1.running_var
fff2.1.num_batches_tracked
fff3.0.weight
fff3.0.bias
fff3.1.weight
fff3.1.bias
fff3.1.running_mean
fff3.1.running_var
fff3.1.num_batches_tracked
fff4.0.weight
fff4.0.bias
fff4.1.weight
fff4.1.bias
fff4.1.running_mean
fff4.1.running_var
fff4.1.num_batches_tracked
fff5.0.weight
fff5.0.bias
fff5.1.weight
fff5.1.bias
fff5.1.running_mean
fff5.1.running_var
fff5.1.num_batches_tracked
fff6.0.weight
fff6.0.bias
fff6.1.weight
fff6.1.bias
fff6.1.running_mean
fff6.1.running_var
fff6.1.num_batches_tracked
fff7.0.weight
fff7.0.bias
fff7.1.weight
fff7.1.bias
fff7.1.running_mean
fff7.1.running_var
fff7.1.num_batches_tracked
fff8.0.weight
fff8.0.bias
fff8.1.weight
fff8.1.bias
fff8.1.running_mean
fff8.1.running_var
fff8.1.num_batches_tracked
fff9.0.weight
fff9.0.bias
fff9.1.weight
fff9.1.bias
fff9.1.running_mean
fff9.1.running_var
fff9.1.num_batches_tracked
fff10.0.weight
fff10.0.bias
fff10.1.weight
fff10.1.bias
fff10.1.running_mean
fff10.1.running_var
fff10.1.num_batches_tracked
fff11.0.weight
fff11.0.bias
fff11.1.weight
fff11.1.bias
fff11.1.running_mean
fff11.1.running_var
fff11.1.num_batches_tracked
fff12.0.weight
fff12.0.bias
fff12.1.weight
fff12.1.bias
fff12.1.running_mean
fff12.1.running_var
fff12.1.num_batches_tracked
classifier0.0.weight
classifier0.0.bias
classifier1.0.weight
classifier1.0.bias
classifier2.0.weight
classifier2.0.bias



VGG(
  (fff0): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff1): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (maxp0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fff2): Sequential(
    (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff3): Sequential(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (maxp1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fff4): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff5): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff6): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (maxp2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fff7): Sequential(
    (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff8): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff9): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (maxp3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fff10): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff11): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (fff12): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
  )
  (maxp4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier0): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU()
    (2): Dropout(p=0.5, inplace=False)
  )
  (classifier1): Sequential(
    (0): Linear(in_features=4096, out_features=4096, bias=True)
    (1): ReLU()
    (2): Dropout(p=0.5, inplace=False)
  )
  (classifier2): Sequential(
    (0): Linear(in_features=4096, out_features=10, bias=True)
  )
)